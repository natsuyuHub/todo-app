EditForm.tsx

import React,{ useState,useEffect } from 'react';
import { v4 as uuidv4 } from 'uuid';
import ListItemTodo from './ListItemTodo'
import Form from './Form'
import EditForm from './EditForm'

interface DataProps {
  id: number,
  name: string,
  status: boolean,
}

interface TodoValue {
  id: string
  text: string
  isEdit: boolean
}

interface SendEditValue {
  id: string
  text: string
  isEdit: boolean
  index: number|null
}


const Data = () => {
  const [data,setData] = useState<DataProps[]>([])
  const [isValidation,setIsValidation] = useState(true)
  const [input,setInput] = useState<string|null>()
  const [todoValue, setTodoValue] = useState<TodoValue[]>([])
  const [editValue, setEditValue] = useState<SendEditValue>()
  const [errorText, setErrorText] = useState("")

  useEffect(() => {
    fetch('/api')
    .then(res => res.json())
    .then(result => {setData(result)})
  }, [])

  console.log(input)

    const handleSubmit=(e:React.FormEvent)=>{
    e.preventDefault()
    const neweditValue = {id:"", text:"",isEdit: false, index:null}
    if(input && isValidation){
      setErrorText("")
      if(editValue && editValue.isEdit === true){
        const instValue = todoValue.map((value) => {
          if(value.id === editValue.id && input){
            value.text = input
            value.isEdit = false
          }
          return value
        })
        // const ids = todoValue[editValue.index].id = editValue.id
        // const texts = todoValue[editValue.index].text = input
        // const isEdits = todoValue[editValue.index].isEdit = false
        // const newaddValue = {id:ids, text:texts, isEdit:isEdits}
        setEditValue(neweditValue)
        setTodoValue(instValue)
        setInput(null)
        return
      }
      if(editValue=== undefined || (editValue && editValue.isEdit === false)){
        setTodoValue( x => [...x,{id: uuidv4(), text: input, isEdit:false}])
        setEditValue(neweditValue)
        setErrorText("")
        return
      }
    } else {
      setIsValidation(false)
      setErrorText("※フォームが空です")
    }
  }

    const handleDelete = (index:number) => {
      const deletedata = [...todoValue]
      deletedata.splice(index,1)
      setTodoValue(deletedata)
    }

  const hadleisEdit = (id:string, text:string,isEdit:boolean, index:number)=>{
    const newisEdit = todoValue.map((value:TodoValue) => {
      if(value.id === id){
        // !isEdit? value.isEdit=true : value.isEdit=false
        isEdit = true
      }
      return value
    })
    setTodoValue(newisEdit)
    setEditValue({id:id, text:text, isEdit:true, index:index})
    setInput(text)
  }

  return (
    <div className="home">
      {!editValue?.isEdit?
      <><Form
      handleSubmit={handleSubmit}
      isValidation={isValidation}
      setInput={setInput}
      setIsValidation={setIsValidation}/>
      <div className="todoContainerCenter" >
        <ListItemTodo items={todoValue} hadleisEdit={hadleisEdit} handleDelete={handleDelete}/>
      </div></>
      :
      <EditForm
      editValue={editValue}
      errorText={errorText}
      handleSubmit={handleSubmit}
      isValidation={isValidation}
      setInput={setInput}
      setIsValidation={setIsValidation}/>
      }
      ここにでるよ
        {data.map( (v:DataProps) =>{ return (<div key={v.id}>name:{v.name},status:{v.status}</div>)})}
    </div>
  );
}
export default Data;


Data Edit Case
        // const instValue = todoValue.map((value) => {
        //   if(value.uuid === editValue.uuid){
        //     value.text = input
        //     value.isEdit = false
        //   }
        //   return value
        // })
        // const ids = todoValue[editValue.index].id = editValue.id
        // const texts = todoValue[editValue.index].text = input
        // const isEdits = todoValue[editValue.index].isEdit = false
        // const newaddValue = {id:ids, text:texts, isEdit:isEdits}
        // setTodoValue(instValue)

Data変換
  // const setDataToView = (data:DataProps[])=>{
  //   const installdata = data.map( v => {
  //     const obj = {id:v.id, uuid:v.uuid, text:v.todovalue, status:v.status}
  //     return obj
  //   })
  //   setTodoValue(installdata)
  //   console.log("setDataToView Success!!")
  // }

  Check
    const [checked, setChecked] = useState([-1])
    const handleToggle = (value: number) => () => {
    const currentIndex = checked.indexOf(value)
    const newChecked = [...checked]

    if (currentIndex === -1) {
      newChecked.push(value)
    } else {
      newChecked.splice(currentIndex, 1)
    }

    setChecked(newChecked)
  };