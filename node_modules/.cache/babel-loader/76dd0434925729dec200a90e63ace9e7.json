{"ast":null,"code":"var _jsxFileName = \"/react-app/src/CheckboxList.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport List from '@mui/material/List';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemButton from '@mui/material/ListItemButton';\nimport ListItemIcon from '@mui/material/ListItemIcon';\nimport ListItemText from '@mui/material/ListItemText';\nimport Checkbox from '@mui/material/Checkbox';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CheckboxList = props => {\n  _s();\n\n  const [checked, setChecked] = useState([0]);\n\n  const handleToggle = value => () => {\n    const currentIndex = checked.indexOf(value);\n    const newChecked = [...checked];\n\n    if (currentIndex === -1) {\n      newChecked.push(value);\n    } else {\n      newChecked.splice(currentIndex, 1);\n    }\n\n    setChecked(newChecked);\n  };\n\n  let noneary = [];\n  const ary = [\"c\", \"b\", \"a\"];\n  let arg = [...Array(ary.length)].map((_, i) => i);\n  Array.prototype.push.apply(noneary, arg);\n  return /*#__PURE__*/_jsxDEV(List, {\n    sx: {\n      width: '100%',\n      maxWidth: 680,\n      bgcolor: 'background.paper'\n    },\n    children: arg.map(value => {\n      const labelId = `checkbox-list-label-${value}`;\n      return /*#__PURE__*/_jsxDEV(ListItem, {\n        children: /*#__PURE__*/_jsxDEV(ListItemButton, {\n          role: undefined,\n          onClick: handleToggle(value),\n          dense: true,\n          children: [/*#__PURE__*/_jsxDEV(ListItemIcon, {\n            children: /*#__PURE__*/_jsxDEV(Checkbox, {\n              edge: \"start\",\n              checked: checked.indexOf(value) !== -1,\n              tabIndex: -1,\n              disableRipple: true,\n              inputProps: {\n                'aria-labelledby': labelId\n              },\n              color: \"default\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 44,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 17\n          }, this), props.items.map(list => {\n            /*#__PURE__*/\n            _jsxDEV(ListItemText, {\n              id: labelId,\n              primary: value.text\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 54,\n              columnNumber: 19\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 15\n        }, this)\n      }, value, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 13\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CheckboxList, \"ToIMgv3BZ7kw23hJeJICam9UGKg=\");\n\n_c = CheckboxList;\nexport default CheckboxList;\n\nvar _c;\n\n$RefreshReg$(_c, \"CheckboxList\");","map":{"version":3,"sources":["/react-app/src/CheckboxList.tsx"],"names":["React","useState","List","ListItem","ListItemButton","ListItemIcon","ListItemText","Checkbox","CheckboxList","props","checked","setChecked","handleToggle","value","currentIndex","indexOf","newChecked","push","splice","noneary","ary","arg","Array","length","map","_","i","prototype","apply","width","maxWidth","bgcolor","labelId","undefined","items","list","text"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,cAAP,MAA2B,8BAA3B;AACA,OAAOC,YAAP,MAAyB,4BAAzB;AACA,OAAOC,YAAP,MAAyB,4BAAzB;AACA,OAAOC,QAAP,MAAqB,wBAArB;;;AAKA,MAAMC,YAAY,GAAIC,KAAD,IAAiB;AAAA;;AACpC,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBV,QAAQ,CAAC,CAAC,CAAD,CAAD,CAAtC;;AAEA,QAAMW,YAAY,GAAIC,KAAD,IAAmB,MAAM;AAC5C,UAAMC,YAAY,GAAGJ,OAAO,CAACK,OAAR,CAAgBF,KAAhB,CAArB;AACA,UAAMG,UAAU,GAAG,CAAC,GAAGN,OAAJ,CAAnB;;AAEA,QAAII,YAAY,KAAK,CAAC,CAAtB,EAAyB;AACvBE,MAAAA,UAAU,CAACC,IAAX,CAAgBJ,KAAhB;AACD,KAFD,MAEO;AACLG,MAAAA,UAAU,CAACE,MAAX,CAAkBJ,YAAlB,EAAgC,CAAhC;AACD;;AAEDH,IAAAA,UAAU,CAACK,UAAD,CAAV;AACD,GAXD;;AAYA,MAAIG,OAAU,GAAG,EAAjB;AACA,QAAMC,GAAG,GAAG,CAAC,GAAD,EAAK,GAAL,EAAS,GAAT,CAAZ;AACA,MAAIC,GAAG,GAAG,CAAC,GAAGC,KAAK,CAACF,GAAG,CAACG,MAAL,CAAT,EAAuBC,GAAvB,CAA2B,CAACC,CAAD,EAAGC,CAAH,KAASA,CAApC,CAAV;AACAJ,EAAAA,KAAK,CAACK,SAAN,CAAgBV,IAAhB,CAAqBW,KAArB,CAA2BT,OAA3B,EAAoCE,GAApC;AAEA,sBACE,QAAC,IAAD;AAAM,IAAA,EAAE,EAAE;AAAEQ,MAAAA,KAAK,EAAE,MAAT;AAAiBC,MAAAA,QAAQ,EAAE,GAA3B;AAAgCC,MAAAA,OAAO,EAAE;AAAzC,KAAV;AAAA,cACGV,GAAG,CAACG,GAAJ,CAASX,KAAD,IAAW;AAClB,YAAMmB,OAAO,GAAI,uBAAsBnB,KAAM,EAA7C;AAGA,0BACI,QAAC,QAAD;AAAA,+BAGE,QAAC,cAAD;AAAgB,UAAA,IAAI,EAAEoB,SAAtB;AAAiC,UAAA,OAAO,EAAErB,YAAY,CAACC,KAAD,CAAtD;AAA+D,UAAA,KAAK,MAApE;AAAA,kCACE,QAAC,YAAD;AAAA,mCACE,QAAC,QAAD;AACE,cAAA,IAAI,EAAC,OADP;AAEE,cAAA,OAAO,EAAEH,OAAO,CAACK,OAAR,CAAgBF,KAAhB,MAA2B,CAAC,CAFvC;AAGE,cAAA,QAAQ,EAAE,CAAC,CAHb;AAIE,cAAA,aAAa,MAJf;AAKE,cAAA,UAAU,EAAE;AAAE,mCAAmBmB;AAArB,eALd;AAME,cAAA,KAAK,EAAC;AANR;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,kBADF,EAWGvB,KAAK,CAACyB,KAAN,CAAYV,GAAZ,CAAiBW,IAAD,IAAU;AACzB;AAAA,oBAAC,YAAD;AAAc,cAAA,EAAE,EAAEH,OAAlB;AAA2B,cAAA,OAAO,EAAEnB,KAAK,CAACuB;AAA1C;AAAA;AAAA;AAAA;AAAA;AACD,WAFA,CAXH;AAAA;AAAA;AAAA;AAAA;AAAA;AAHF,SACOvB,KADP;AAAA;AAAA;AAAA;AAAA,cADJ;AAqBD,KAzBA;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AA8BD,CAlDD;;GAAML,Y;;KAAAA,Y;AAoDN,eAAeA,YAAf","sourcesContent":["import React ,{ useState } from 'react';\nimport List from '@mui/material/List';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemButton from '@mui/material/ListItemButton';\nimport ListItemIcon from '@mui/material/ListItemIcon';\nimport ListItemText from '@mui/material/ListItemText';\nimport Checkbox from '@mui/material/Checkbox';\nexport interface Props {\nitems: {id: string, text: string}[]\n}\n\nconst CheckboxList = (props:Props) => {\n  const [checked, setChecked] = useState([0]);\n\n  const handleToggle = (value: number) => () => {\n    const currentIndex = checked.indexOf(value);\n    const newChecked = [...checked];\n\n    if (currentIndex === -1) {\n      newChecked.push(value);\n    } else {\n      newChecked.splice(currentIndex, 1);\n    }\n\n    setChecked(newChecked);\n  };\n  let noneary:[] = []\n  const ary = [\"c\",\"b\",\"a\"]\n  let arg = [...Array(ary.length)].map((_,i) => i)\n  Array.prototype.push.apply(noneary, arg)\n\n  return (\n    <List sx={{ width: '100%', maxWidth: 680, bgcolor: 'background.paper' }}>\n      {arg.map((value) => {\n        const labelId = `checkbox-list-label-${value}`;\n\n\n        return (\n            <ListItem\n              key={value}\n            >\n              <ListItemButton role={undefined} onClick={handleToggle(value)} dense>\n                <ListItemIcon>\n                  <Checkbox\n                    edge=\"start\"\n                    checked={checked.indexOf(value) !== -1}\n                    tabIndex={-1}\n                    disableRipple\n                    inputProps={{ 'aria-labelledby': labelId }}\n                    color=\"default\"\n                  />\n                </ListItemIcon>\n                {props.items.map((list) => {\n                  <ListItemText id={labelId} primary={value.text} />\n                })}\n              </ListItemButton>\n            </ListItem>\n        );\n      })}\n    </List>\n  );\n}\n\nexport default CheckboxList"]},"metadata":{},"sourceType":"module"}