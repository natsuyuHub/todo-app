{"ast":null,"code":"var _jsxFileName = \"/react-app/src/CheckboxList.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport List from '@mui/material/List';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemButton from '@mui/material/ListItemButton';\nimport ListItemIcon from '@mui/material/ListItemIcon';\nimport ListItemText from '@mui/material/ListItemText';\nimport Checkbox from '@mui/material/Checkbox';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n;\n\nconst CheckboxList = props => {\n  _s();\n\n  const [checked, setChecked] = useState([0]);\n\n  const handleToggle = value => () => {\n    const currentIndex = checked.indexOf(value);\n    const newChecked = [...checked];\n\n    if (currentIndex === -1) {\n      newChecked.push(value);\n    } else {\n      newChecked.splice(currentIndex, 1);\n    }\n\n    setChecked(newChecked);\n  };\n\n  let noneary = [];\n  const ary = props.items;\n  let arg = [...Array(ary.length)].map((_, i) => i);\n  Array.prototype.push.apply(noneary, arg);\n  return /*#__PURE__*/_jsxDEV(List, {\n    sx: {\n      width: '100%',\n      maxWidth: 680,\n      bgcolor: 'background.paper'\n    },\n    children: props.items.map(value => {\n      const labelId = `checkbox-list-label-${value}`;\n      return arg.map(indexofnumber => {\n        return /*#__PURE__*/_jsxDEV(ListItem, {\n          children: /*#__PURE__*/_jsxDEV(ListItemButton, {\n            role: undefined,\n            onClick: handleToggle(indexofnumber),\n            dense: true,\n            children: [/*#__PURE__*/_jsxDEV(ListItemIcon, {\n              children: /*#__PURE__*/_jsxDEV(Checkbox, {\n                edge: \"start\",\n                checked: checked.indexOf(indexofnumber) !== -1,\n                tabIndex: -1,\n                disableRipple: true,\n                inputProps: {\n                  'aria-labelledby': labelId\n                },\n                color: \"default\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 45,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 44,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n              id: labelId,\n              primary: value.text\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 54,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 15\n          }, this)\n        }, value.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 15\n        }, this);\n      });\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CheckboxList, \"ToIMgv3BZ7kw23hJeJICam9UGKg=\");\n\n_c = CheckboxList;\nexport default CheckboxList;\n\nvar _c;\n\n$RefreshReg$(_c, \"CheckboxList\");","map":{"version":3,"sources":["/react-app/src/CheckboxList.tsx"],"names":["React","useState","List","ListItem","ListItemButton","ListItemIcon","ListItemText","Checkbox","CheckboxList","props","checked","setChecked","handleToggle","value","currentIndex","indexOf","newChecked","push","splice","noneary","ary","items","arg","Array","length","map","_","i","prototype","apply","width","maxWidth","bgcolor","labelId","indexofnumber","undefined","text","id"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,cAAP,MAA2B,8BAA3B;AACA,OAAOC,YAAP,MAAyB,4BAAzB;AACA,OAAOC,YAAP,MAAyB,4BAAzB;AACA,OAAOC,QAAP,MAAqB,wBAArB;;AAGC;;AAED,MAAMC,YAAiC,GAAGC,KAAK,IAAI;AAAA;;AACjD,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBV,QAAQ,CAAC,CAAC,CAAD,CAAD,CAAtC;;AAEA,QAAMW,YAAY,GAAIC,KAAD,IAAmB,MAAM;AAC5C,UAAMC,YAAY,GAAGJ,OAAO,CAACK,OAAR,CAAgBF,KAAhB,CAArB;AACA,UAAMG,UAAU,GAAG,CAAC,GAAGN,OAAJ,CAAnB;;AAEA,QAAII,YAAY,KAAK,CAAC,CAAtB,EAAyB;AACvBE,MAAAA,UAAU,CAACC,IAAX,CAAgBJ,KAAhB;AACD,KAFD,MAEO;AACLG,MAAAA,UAAU,CAACE,MAAX,CAAkBJ,YAAlB,EAAgC,CAAhC;AACD;;AAEDH,IAAAA,UAAU,CAACK,UAAD,CAAV;AACD,GAXD;;AAYA,MAAIG,OAAU,GAAG,EAAjB;AACA,QAAMC,GAAG,GAAGX,KAAK,CAACY,KAAlB;AACA,MAAIC,GAAG,GAAG,CAAC,GAAGC,KAAK,CAACH,GAAG,CAACI,MAAL,CAAT,EAAuBC,GAAvB,CAA2B,CAACC,CAAD,EAAGC,CAAH,KAASA,CAApC,CAAV;AACAJ,EAAAA,KAAK,CAACK,SAAN,CAAgBX,IAAhB,CAAqBY,KAArB,CAA2BV,OAA3B,EAAoCG,GAApC;AAEA,sBACE,QAAC,IAAD;AAAM,IAAA,EAAE,EAAE;AAAEQ,MAAAA,KAAK,EAAE,MAAT;AAAiBC,MAAAA,QAAQ,EAAE,GAA3B;AAAgCC,MAAAA,OAAO,EAAE;AAAzC,KAAV;AAAA,cACGvB,KAAK,CAACY,KAAN,CAAYI,GAAZ,CAAgBZ,KAAK,IAAI;AACxB,YAAMoB,OAAO,GAAI,uBAAsBpB,KAAM,EAA7C;AACA,aAEES,GAAG,CAACG,GAAJ,CAASS,aAAD,IAAiB;AACvB,4BACE,QAAC,QAAD;AAAA,iCAGA,QAAC,cAAD;AAAgB,YAAA,IAAI,EAAEC,SAAtB;AAAiC,YAAA,OAAO,EAAEvB,YAAY,CAACsB,aAAD,CAAtD;AAAuE,YAAA,KAAK,MAA5E;AAAA,oCACE,QAAC,YAAD;AAAA,qCACE,QAAC,QAAD;AACE,gBAAA,IAAI,EAAC,OADP;AAEE,gBAAA,OAAO,EAAExB,OAAO,CAACK,OAAR,CAAgBmB,aAAhB,MAAmC,CAAC,CAF/C;AAGE,gBAAA,QAAQ,EAAE,CAAC,CAHb;AAIE,gBAAA,aAAa,MAJf;AAKE,gBAAA,UAAU,EAAE;AAAE,qCAAmBD;AAArB,iBALd;AAME,gBAAA,KAAK,EAAC;AANR;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,oBADF,eAWE,QAAC,YAAD;AAAc,cAAA,EAAE,EAAEA,OAAlB;AAA2B,cAAA,OAAO,EAAEpB,KAAK,CAACuB;AAA1C;AAAA;AAAA;AAAA;AAAA,oBAXF;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA,WACKvB,KAAK,CAACwB,EADX;AAAA;AAAA;AAAA;AAAA,gBADF;AAkBA,OAnBF,CAFF;AAwBD,KA1BA;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AA+BD,CAnDD;;GAAM7B,Y;;KAAAA,Y;AAqDN,eAAeA,YAAf","sourcesContent":["import React ,{ useState } from 'react';\nimport List from '@mui/material/List';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemButton from '@mui/material/ListItemButton';\nimport ListItemIcon from '@mui/material/ListItemIcon';\nimport ListItemText from '@mui/material/ListItemText';\nimport Checkbox from '@mui/material/Checkbox';\ninterface TodoProps {\n  items: {id: string, text: string}[]\n};\n\nconst CheckboxList: React.FC<TodoProps> = props => {\n  const [checked, setChecked] = useState([0]);\n\n  const handleToggle = (value: number) => () => {\n    const currentIndex = checked.indexOf(value);\n    const newChecked = [...checked];\n\n    if (currentIndex === -1) {\n      newChecked.push(value);\n    } else {\n      newChecked.splice(currentIndex, 1);\n    }\n\n    setChecked(newChecked);\n  };\n  let noneary:[] = []\n  const ary = props.items\n  let arg = [...Array(ary.length)].map((_,i) => i)\n  Array.prototype.push.apply(noneary, arg)\n\n  return (\n    <List sx={{ width: '100%', maxWidth: 680, bgcolor: 'background.paper' }}>\n      {props.items.map(value => {\n        const labelId = `checkbox-list-label-${value}`;\n        return (\n\n          arg.map((indexofnumber)=>{\n            return (\n              <ListItem\n              key={value.id}\n              >\n              <ListItemButton role={undefined} onClick={handleToggle(indexofnumber)} dense>\n                <ListItemIcon>\n                  <Checkbox\n                    edge=\"start\"\n                    checked={checked.indexOf(indexofnumber) !== -1}\n                    tabIndex={-1}\n                    disableRipple\n                    inputProps={{ 'aria-labelledby': labelId }}\n                    color=\"default\"\n                    />\n                </ListItemIcon>\n                <ListItemText id={labelId} primary={value.text} />\n              </ListItemButton>\n            </ListItem>\n          )}\n          )\n        );\n      })}\n    </List>\n  );\n}\n\nexport default CheckboxList"]},"metadata":{},"sourceType":"module"}